Source: pyepics
Maintainer: Daron Chabot <chabot@frib.msu.edu>
Section: python
Priority: optional
Build-Depends: debhelper (>= 10), dh-python, python3-all, python3-setuptools
Build-Depends-Indep: python3-sphinx, python3-docutils, python3-numpydoc
XS-Python3-Version: >= 3.5
Standards-Version: 3.9.8
Homepage: http://pyepics.github.io/pyepics/
Vcs-Git: https://github.com/pyepics/pyepics.git
Vcs-Browser: https://github.com/pyepics/pyepics

Package: python3-pyepics
Architecture: all
Depends: ${misc:Depends}, ${python3:Depends},
         python3-numpy, python3-pyparsing, epics-dev
Suggests: python3-pyepics-doc
Description: Epics Channel Access for Python 3
 Python Interface to the Epics Channel Access protocol
 of the Epics control system.   PyEpics provides 3 layers of access to
 Channel Access (CA):
   1. a light wrapping of the CA C library calls, using ctypes. This
      provides a procedural CA library in which the user is expected
      to manage Channel IDs. It is mostly provided as a foundation
      upon which higher-level access is built.
   2. PV() (Process Variable) objects, which represent the basic object
      in CA, allowing one to keep a persistent connection to a remote
      Process Variable.
   3. A simple set of functions caget(), caput() and so on to mimic
      the CA command-line tools and give the simplest access to CA.
 .
 In addition, the library includes convenience classes to define
 Devices -- collections of PVs that might represent an Epics Record
 or physical device (say, a camera, amplifier, or power supply), and
 to help write GUIs for CA.
 .
 This package contains pyepics for Python 3.

Package: python3-pyepics-doc
Section: doc
Architecture: all
Depends: ${misc:Depends}, ${sphinxdoc:Depends}
Description: PyEpics documentation
 PyEpics is an interface for the Channel Access (CA) library of the Epics
 Control System to the Python Programming language. The pyepics package
 provides a base epics module to python, with methods for  reading from and
 writing to Epics Process Variables (PVs) via the CA protocol.
 The package includes a thin and fairly complete layer over the low-level
 Channel Access library in the ca module, and higher level abstractions built
 on top of this basic functionality.
 .
 This package contains documentation for pyepics.

